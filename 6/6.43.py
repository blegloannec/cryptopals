#!/usr/bin/env python3

from Cryptodome.Hash import SHA1
from Cryptodome.Random import get_random_bytes
import Cryptodome.Random.random as random


## DSA parameters ##
# p prime
# q prime, q | p-1
# random 1 < h < p
# g = h^((p-1)/q) =/= 1 (of order q mod p)
# we work in the multiplicative group mod p generated by g of order q
p = 0x800000000000000089e1855218a0e7dac38136ffafa72eda7859f2171e25e65eac698c1702578b07dc2a1076da241c76c62d374d8389ea5aeffd3226a0530cc565f3bf6b50929139ebeac04f48c3c84afb796d61e5a4f9a8fda812ab59494232c7d2b4deb50aa18ee9e132bfa85ac4374d7f9091abc3d015efc871a584471bb1
q = 0xf4f47f05794b256174bba6e9b396a7707e563c5b
g = 0x5958c9d3898b224b12672c0b98e06c60df923cb8bc999d119458fef538b8fa4046c8db53039db620c094c9fa077ef389b5322a559946a71903f990f1f7e0e025e2d7f7cf494aff1a0470f5b64c36b625a097f1651fe775323556fe00b3608c887892878480e99041be601a62166ca6894bdd41a7054ec89f756ba9fc95302291


## DSA implementation ##
def gen_user_key():
    x = random.randint(1, q-1)  # private
    y = pow(g, x, p)            # public
    return (x, y)

def dsa_sign(x: int, msg: bytes):
    k = random.randint(1, q-1)  # sig. priv. key
    r = pow(g, k, p) % q        # sig. pub.  key, reduced mod q
    if r == 0:  # start again
        return dsa_sign(x, msg)
    h = int.from_bytes(SHA1.new(msg).digest(), 'big')
    s = (pow(k, -1, q) * (h + x*r)) % q
    if s == 0:  # start again
        return dsa_sign(x, msg)
    # r = (g^k mod p) mod q
    # s = (h+xr)/k    mod q
    return (r, s)

def dsa_verify(y: int, msg: bytes, sig) -> bool:
    r, s = sig
    if not (0 < r < q and 0 < s < q):
        return False
    w = pow(s, -1, q)  # w = k/(h+xr) mod q
    h = int.from_bytes(SHA1.new(msg).digest(), 'big')
    u1 = (h*w) % q     # u1 = hk/(h+xr)
    u2 = (r*w) % q     # u2 = rk/(h+xr)
    v = ((pow(g, u1, p) * pow(y, u2, p)) % p) % q
    # v0 = g^(hk/(h+xr)) * (g^x)^(rk/(h+xr)) mod p
    #    = g^(k(h+xr)/(h+xr))                mod p
    #    = g^k                               mod p
    # v = v0 mod q = r
    return v == r

def sanity_test():
    x, y = gen_user_key()
    msg = get_random_bytes(100)
    sig = dsa_sign(x, msg)
    assert dsa_verify(y, msg, sig)

if __name__=='__main__':
    sanity_test()


## Attack ##
# message
msg = b'For those that envy a MC it can be hazardous to your health\nSo be friendly, a matter of life and death, just like a etch-a-sketch\n'
#assert SHA1.new(msg).hexdigest() == 'd2d0714f014a9784047eaeccf956520045c45265'
# public key
y = 0x84ad4719d044495496a3201c8ff484feb45b962e7302e56a392aee4abab3e4bdebf2955b4736012f21a08084056b19bcd7fee56048e004e44984e2f411788efdc837a0d2e5abb7b555039fd243ac01f0fb2ed1dec568280ce678e931868d23eb095fde9d3779191b8c0299d6e07bbb283e6633451e535c45513b2d33c99ea17
# signature
r = 548099063082341131477253921760299949438196259240
s = 857042759984254168557880549501802188789837994940

if __name__=='__main__':
    h = int.from_bytes(SHA1.new(msg).digest(), 'big')
    r_inv = pow(r, -1, q)
    # crack the private key by brute-forcing on k
    for k in range(1<<16):
        # s = (h+xr)/k mod q
        # x = (sk-h)/r mod q
        x = ((s*k - h) * r_inv) % q
        if pow(g, x, p) == y:
            break
    print(SHA1.new(hex(x)[2:].encode()).hexdigest())
